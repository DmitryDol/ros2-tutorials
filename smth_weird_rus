Конфигурация среды.
(подготовка к работе среды ROS 2)
ROS 2 основывается на идее комбинирования рабочих пространств. «Рабочее пространство» (Workspace) – особый термин использующийся в ROS 2, обозначающий каталог, где располагаются все пакеты ROS 2 
Основное рабочее пространство называется андерлэй (underlay). Дополнительные же рабочие пространства называются оверлэями (overlay). Разрабатывая на ROS 2 вы часто будете иметь дело с несколькими активными рабочими пространствами одновременно.
Использование рабочих пространств облегчает использования разных версий ROS 2 или разных наборов пакетов. Это  также позволяет устанавливать различные дистрибутивы ROS 2 на один компьютер и переключаться между ними.
1. Запуск setup-файла
Чтобы выполнять команды ROS 2 при запуске каждого нового процесса оболочки необходимо выполнить команду:
source /opt/ros/humble/setup.bash на Linux системе или
call C:\dev\ros2\local_setup.bat на системе с ОС Windows.
2. Автоматизация запуска setup-файла при запуске оболочки
Для того, чтобы не запускать setup-файл при каждом новом открытии оболочки, можно добавить его в список автозапуска оболочки. Для этого на Linux необходимо выполнить команду:
echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc 
А на Windows для этого необходимо использовать оболочку PowerShell и выполнить следующие шаги:
Создать в ‘My Documents’ папку ‘WindowsPowerShell’,
Внутри этой папки создать файл ‘Microsoft.PowerShell_profile.ps1’
Внутри этого файла необходимо прописать команду:
Unblock-File C:\dev\ros2_humble\local_setup.ps1
Unblock file добавляется для того, чтобы при запуске PowerShell не запрашивалось разрешение на выполнение команды запуска setup-файла.
Проверка переменных среды
Выполнение setup-файла должно установить некоторые переменные среды, необходимые для функционирования ROS 2. Для проверки этого можно выполнить команды
Linux: printenv | grep -i ROS 
Windows: set | findstr -i ROS
Необходимо проверить, что установлены переменные 
ROS_VERSION=2
ROS_PYTHON_VERSION=3
ROS_DISTRO=humble
-- переменная ROS_DOMAIN_ID
ROS_DOMAIN_ID – уникальный номер для группы узлов (nodes) ROS 2. Рекомендуется использовать любое число от 0 до 101 (включительно). По умолчанию ROS_DOMAIN_ID = 0. При необходимости работать с ROS 2 по сети можно сконфигурировать эту переменную, используя команды оболочки.
-- переменная ROS_LOCALHOST_ONLY
По умолчанию коммуникация в ROS2 происходит в том числе в локальной сети. Это может мешать при работе в сети, где другие пользователи также используют ROS. Во избежание этой проблемы необходимо установить переменную ROS_LOCALHOST_ONLY=1.

Turtulesim
Turtlesim – небольшой симулятор для изучения ROS 2. Он на самом простом уровне показывает возможности ROS 2, обучая идеям, которые лежат в основе создания реального робота и его симуляции.
Ros2 tool --  это средство управления ROS 2. Оно поддерживает множество команд, относящихся к разным аспектам системы и её работы. Можно использовать ros2 tool для создания узла, установки параметра и много другого. Ros2 tool устанавливается вместе с ROS 2.
Rqt – графический пользовательский интерфейс для ROS 2. Все, что можно сделать в rqt, можно выполнить также используя командную строку, но rqt предлагает более понятный пользователю интерфейс.
1 Установка turtlesim
Для установки turtlesim выполняется команда:
sudo apt update

sudo apt install ros-humble-turtlesim

На windows turtlesim должен быть установленным по умолчанию.
Для проверки, установлен ли turtlesim можно выполнить команду
ros2 pkg executables turtlesim
Если turtulesim действительно установлен, эта комманда вернет список исполняемых файлов:
turtlesim draw_square
turtlesim mimic
turtlesim turtle_teleop_key
turtlesim turtlesim_node

2. Запуск turtlesim
Чтобы запустить turtlesim, необходимо ввести следующую команду:
ros2 run turtlesim turtlesim_node

В результате этого откроется окошко с черепахой в центре, а в консоли будет выведена информация о запуске и создании черепахи в некоторых координатах:
[INFO] [turtlesim]: Starting turtlesim with node name /turtlesim
[INFO] [turtlesim]: Spawning turtle [turtle1] at x=[5.544445], y=[5.544445], theta=[0.000000]

3. Использвание turtlesim
Открываем новый терминал и запускаем новый узел для контроля черепахи:
ros2 run turtlesim turtle_teleop_key

В этот момент у нас открыто 3 окна: 2 окна с запущенной оболочкой и одно – визуальное представление turtlesim с черепахой в центе.
Теперь можно управлять черепахой используя стрелки на клавиатуре. Черепаха будет перемещаться по экрану оставляя за собой след.
4. Установка rqt
На Linux, для установки rqt необходимо выполнить:
sudo apt update

sudo apt install '~nros-humble-rqt*'

На windows же rqt должен быть установлен по умолчанию.
5. Использование rqt
При первом запуске rqt, окно приложения оказывается пустым. Однако ничего страшного в этом нет! В верхнем меню приложения необходимо выбрать Plugins > Sevices > Service Caller.
Чтобы убедиться что все сервисы узла turtlesim доступны необходимо нажать на кнопку «обновление» (синяя кнопка с круглой стрелкой), расположенную слева от выпадающего меню.
Далее необходимо нажать на выпадающее меню сервисов, чтобы увидеть все сервисы turtlesim. Затем нужно выбрать сервис /spawn.
5.1 Пробуем пользоваться сервисом /spawn
Давайте попробуем использовать rqt для вызова сервиса /spawn. Этот сервис должен создать новуй черепаху в окне turtlesim.
Выбрав сервис /spawn в нижнем окне можно выбрать имя для черепахи, указать ее начальное положение на экране, изменяя параметры в колонке «Expression». В колонке type также указывается тип данных изменяемых параметров.
Заметьте, что имя черепахи должно быть уникальным. При попытке создать черепаху с повторяющимся именем в терминале, в котором запущен turtlesim_node появится ошибка:
[ERROR] [turtlesim]: A turtle named [turtle1] already exists
(Черепаха с именем turtle1 уже существует!)
Чтобы создать вторую черепаху необходимо вызвать сервис. Это можно сделать нажав на кнопку Call в правом верхнем углу окна rqt.
При успешном вызове сервиса в окне turtlesim появляется новая черепаха (немного не такая, как прежняя), в указаных нами координатах.
Если снова обновить список сервисов в окне rqt, можно заметить новые сервисы, связанные с созданной черепахой, расположенные в подкатегории /turtle2/…, в дополнении к сервисам в категории /turtle1/….
5.2 Пробуем пользоваться сервисом /set_pen
Используя сервис /set_pen можно дать черепахе уникальную ручку (инструмент рисующих хвост за черепахой, а как вы думали он появлялся раньше?). 
В параметрах /set_pen можно указать значения r, g, b для цвета ручки (заметьте что они имеют тип uint8, принимая при этом значения от 0 до 255), а также width, параметр устанавливающий толщину линии.
Например, чтобы заставить черепаху «рисовать» при движении красной линией, можно установить следующие параметры:
r = 255, g = 0, b = 0, width = 5.
При этом нужно не забыть вызвать настроенный нами сервис.
После этого можно вернуться в терминал с запущенным turtle_teleop_key и убедиться, что параметры успешно обновлены, а черепаха действительно оставляет красный след, пробуя управлять черепахой с клавиатуры.
Возможно вы также заметили, что пока никак нельзя управлять второй черепахой. Так происходит, потому что для неё пока не существует узла teleop.
6. Переназначение [узла teleop]
Для управления второй черепахой необходим новый узел teleop. Однако создав новый такой узел, пользуясь инструкцией выше, можно убедиться в том, что он также управляет первой черепахой. Для изменение его поведения необходимо переназначить топик cmd_vel.
Для этого в новом терминале нужно запустить следующую строчку:
ros2 run turtlesim turtle_teleop_key --ros-args --remap turtle1/cmd_vel:=turtle2/cmd_vel

Теперь мы можем перемещать вторую черепаху, когда активно окно нового терминала, и старую – когда активно окно терминала с запущенным ранее узлом turtle_teleop_key.
7. Закрываем turtlesim
Чтобы остановить симуляцию, можно нажать ctrl + c в терминале с telesim и q в терминалах с turtle_teleop_key.
Понимаем узлы
Общие сведения
1. Граф ROS 2
В следующих нескольких туториалах речь идет о нескольких ключевых концепциях ROS 2, которые вместе образуют то, что называется графом ROS (2).
Граф ROS – это сеть из элементов, вместе и одновременно обрабатывающих данные. Если вы попытаетесь представить его визуально, то это будет нечто, охватывающее все исполняемые файлы и все связи между ними.
2. Узлы в ROS 2
Каждый узел в ROS 2 должен быть ответственен за одну отдельную задачу, например, за управление двигателем в колесе или за отсылку данных, собранных с лазерного дальномера. Каждый узел может отправлять или получать данные при помощи топиков (topics), сервисов (services), действий (actions) или параметров (parameters).
Полная робо-система состоит из многих узлов, работающих одновременно. В ROS 2 один исполняемый файл может содержать как один так и больее одного узла.
Упражнения
1. ros2 run
Команда ros2 run запускает исполняемый файл из пакета:
ros2 run <имя_пакета> <имя_исполняемого_файла>
Этой командой мы уже пользовались, когда запускали turtlesim.
В команде 
ros2 run turtlesim turtlesim_node
turtlesim – имя пакета, а turtlesim_node – имя исполняемого файла.
Однако мы все ещё не знаем названия узлов. Для этого используется команда ros2 node list
2.ros2 node list
ros2 node list перечисляет имена всех запущенных узлов. Это может быть особенно полезно, когда необходимо взаимодействовать с тем или иным узлом, или же при работе с робо-системой, содержащей множество различных узлов, в которой постоянно необходимо следить за их изменениями.
Попробуем ввести в терминал команду 
ros2 node list.
Терминал вернет нам имя узла:
/turtlesim
Откроем новый терминал и запустим в нем исполняемый файл turtle_teleop_key из пакета turtlesim, а затем вернувший в терминал, где мы можем выполнять команды ros2 снова выполним ros2 bode list. Теперь в нем можно увидеть следующее:
/turtlesim
/teleop_turtle
2.1 Переназначение
Переназначение позволяет переопределить свойства узлов, заданные по умолчанию, например, имя узла, имена топиков и сервисов и т.д. Ранее мы переназначали топик cmd_vel для переключения управления на вторую черепаху.
Теперь переопределим имя узла /turtlesim. Для этого выполним следующую команду:
ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtle
Поскольку мы вызываем run, откроется ещё одно окно turtlesim. Если после этого вернуться в терминал и посмотреть список активных узлов, можно увидеть уже три имени:
/my_turtle
/turtlesim
/teleop_turtle
3. ros2 node info
Теперь, когда мы знаем названия узлов, можно также получить доступ к дополнительной информации о них:
ros2 node info <имя_узла >
Чтобы изучить узел my_turtle, выполним следующее:
ros2 node info /my_turtle
Ros2 node info возвращает список всех «издателей» и «подписчиков» узла, а также список всех доступных сервисов и действий (т.е. все связи этого узла в Графе ROS). Выведенная информация должна выглядеть как то так:
/my_turtle
  Subscribers:
    /parameter_events: rcl_interfaces/msg/ParameterEvent
    /turtle1/cmd_vel: geometry_msgs/msg/Twist
  Publishers:
    /parameter_events: rcl_interfaces/msg/ParameterEvent
    /rosout: rcl_interfaces/msg/Log
    /turtle1/color_sensor: turtlesim/msg/Color
    /turtle1/pose: turtlesim/msg/Pose
  Service Servers:
    /clear: std_srvs/srv/Empty
    /kill: turtlesim/srv/Kill
    /my_turtle/describe_parameters: rcl_interfaces/srv/DescribeParameters
    /my_turtle/get_parameter_types: rcl_interfaces/srv/GetParameterTypes
    /my_turtle/get_parameters: rcl_interfaces/srv/GetParameters
    /my_turtle/list_parameters: rcl_interfaces/srv/ListParameters
    /my_turtle/set_parameters: rcl_interfaces/srv/SetParameters
    /my_turtle/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically
    /reset: std_srvs/srv/Empty
    /spawn: turtlesim/srv/Spawn
    /turtle1/set_pen: turtlesim/srv/SetPen
    /turtle1/teleport_absolute: turtlesim/srv/TeleportAbsolute
    /turtle1/teleport_relative: turtlesim/srv/TeleportRelative
  Service Clients:

  Action Servers:
    /turtle1/rotate_absolute: turtlesim/action/RotateAbsolute
  Action Clients:

Теперь можно попробовать эту же команду для оставшихся двух узлов из списка ros2 node list.
